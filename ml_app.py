# Arquivo: ml_app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from database_manager import DatabaseManager
from ml_models import EconomicPredictor
import os
import joblib

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Previs√£o Econ√¥mica - Machine Learning",
    page_icon="ü§ñ",
    layout="wide"
)

# Fun√ß√£o para carregar dados
@st.cache_data(ttl=3600)  # Cache por 1 hora
def load_data(table_name, start_date=None, end_date=None):
    db_manager = DatabaseManager()
    return db_manager.load_data(table_name, start_date, end_date)

# Mapeamento de nomes para exibi√ß√£o
indicator_names = {
    'ipca': 'Infla√ß√£o (IPCA)',
    'pib': 'PIB Real',
    'divida_pib': 'D√≠vida/PIB',
    'selic': 'Taxa SELIC Di√°ria',
    'selic_meta': 'Meta da Taxa SELIC',
    'transacoes': 'Saldo em Transa√ß√µes Correntes',
    'resultado_primario': 'Resultado Prim√°rio'
}

# Interface principal
st.title("Previs√£o de Indicadores Econ√¥micos com Machine Learning")

# Sidebar
st.sidebar.title("Configura√ß√µes")

# Verificar quais indicadores t√™m dados
db_manager = DatabaseManager()
available_indicators = {}

for ind in indicator_names.keys():
    data = db_manager.load_data(ind)
    if data is not None and len(data) > 0:
        available_indicators[ind] = indicator_names[ind]

# Sele√ß√£o de indicador
indicator = st.sidebar.selectbox(
    "Selecione o indicador para prever",
    list(available_indicators.keys()),
    format_func=lambda x: available_indicators[x]
)

# Sele√ß√£o de modelo
model_type = st.sidebar.selectbox(
    "Selecione o modelo",
    ["Linear Regression", "Ridge Regression", "Lasso Regression", "Random Forest"],
    index=3
)

# Mapeamento de modelos
model_map = {
    "Linear Regression": "linear",
    "Ridge Regression": "ridge",
    "Lasso Regression": "lasso",
    "Random Forest": "random_forest"
}

selected_model = model_map[model_type]

# N√∫mero de per√≠odos futuros para prever
forecast_periods = st.sidebar.slider(
    "N√∫mero de meses para prever",
    min_value=1,
    max_value=24,
    value=12
)

# Inicializar preditor
predictor = EconomicPredictor()

# Verificar se existem modelos salvos
model_dir = 'models'
model_path = f"{model_dir}/{indicator}_{selected_model}_model.pkl"
scaler_path = f"{model_dir}/{indicator}_scaler.pkl"

model_exists = os.path.exists(model_path) and os.path.exists(scaler_path)

# Avisar ao usu√°rio sobre o status do modelo
if model_exists:
    st.sidebar.success(f"Modelo existente encontrado para {indicator_names[indicator]}")
else:
    st.sidebar.warning(f"Nenhum modelo encontrado para {indicator_names[indicator]}. Por favor, treine o modelo.")

# Bot√£o para treinar modelo
train_button = st.sidebar.button("Treinar Modelo")

# Criar guias
tab1, tab2, tab3 = st.tabs(["Previs√µes", "An√°lise do Modelo", "Dados Hist√≥ricos"])

with tab1:
    # Treinar modelo se solicitado
    if train_button or not model_exists:
        with st.spinner(f"Treinando modelo {model_type} para {indicator_names[indicator]}..."):
            metrics = predictor.train_model(indicator, selected_model)
            
            if metrics:
                st.success("Modelo treinado com sucesso!")
                
                # Exibir m√©tricas
                st.subheader("M√©tricas de Avalia√ß√£o")
                
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("MSE", f"{metrics['mse']:.4f}")
                col2.metric("RMSE", f"{metrics['rmse']:.4f}")
                col3.metric("MAE", f"{metrics['mae']:.4f}")
                col4.metric("R¬≤", f"{metrics['r2']:.4f}")
                
                # Exibir gr√°fico de previs√£o vs real
                st.subheader("Previs√£o vs Valores Reais (Conjunto de Teste)")
                st.image(f"{model_dir}/{indicator}_prediction.png")
            else:
                st.error("Falha ao treinar o modelo. Verifique os dados.")
    elif model_exists:
        # Carregar modelo existente
        try:
            predictor.models[indicator] = joblib.load(model_path)
            predictor.scalers[indicator] = joblib.load(scaler_path)
        except Exception as e:
            st.error(f"Erro ao carregar modelo: {e}")
    
    # Fazer previs√µes
    if indicator in predictor.models or model_exists:
        st.header(f"Previs√£o de {indicator_names[indicator]} para os pr√≥ximos {forecast_periods} meses")
        
        with st.spinner("Gerando previs√µes..."):
            # Tentar carregar o modelo novamente se necess√°rio
            if indicator not in predictor.models and model_exists:
                try:
                    predictor.models[indicator] = joblib.load(model_path)
                    predictor.scalers[indicator] = joblib.load(scaler_path)
                except Exception as e:
                    st.error(f"Erro ao carregar modelo: {e}")
            
            future_preds = predictor.predict_future(indicator, steps=forecast_periods)
            
            if future_preds is not None:
                # Carregar dados hist√≥ricos para compara√ß√£o
                historical_data = load_data(indicator)
                
                if historical_data is not None:
                    # Limitar aos √∫ltimos 24 meses para visualiza√ß√£o
                    historical_data = historical_data.sort_values('date').tail(24)
                    
                    # Preparar dados para gr√°fico
                    historical_df = pd.DataFrame({
                        'date': historical_data['date'],
                        'value': historical_data['value'],
                        'tipo': 'Hist√≥rico'
                    })
                    
                    future_df = pd.DataFrame({
                        'date': future_preds['date'],
                        'value': future_preds['value'],
                        'tipo': 'Previs√£o'
                    })
                    
                    combined_df = pd.concat([historical_df, future_df])
                    
                    # Criar gr√°fico
                    fig = px.line(
                        combined_df, 
                        x='date', 
                        y='value', 
                        color='tipo',
                        title=f'Previs√£o de {indicator_names[indicator]} (Pr√≥ximos {forecast_periods} meses)',
                        labels={'date': 'Data', 'value': 'Valor', 'tipo': 'Tipo'},
                        line_dash='tipo',
                        color_discrete_map={'Hist√≥rico': 'blue', 'Previs√£o': 'red'}
                    )
                    
                    # Adicionar intervalo de confian√ßa (simplificado)
                    if selected_model == 'random_forest':
                        # Para Random Forest, podemos estimar a incerteza
                        std_dev = historical_data['value'].std() * 0.5
                        
                        upper_bound = future_df['value'] + std_dev
                        lower_bound = future_df['value'] - std_dev
                        
                        fig.add_trace(
                            go.Scatter(
                                x=future_df['date'].tolist() + future_df['date'].iloc[::-1].tolist(),
                                y=upper_bound.tolist() + lower_bound.iloc[::-1].tolist(),
                                fill='toself',
                                fillcolor='rgba(255,0,0,0.2)',
                                line=dict(color='rgba(255,0,0,0)'),
                                name='Intervalo de Confian√ßa'
                            )
                        )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Exibir tabela de previs√µes
                    st.subheader("Valores Previstos")
                    st.dataframe(future_preds)
                    
                    # An√°lise de tend√™ncia
                    trend = "ascendente" if future_preds['value'].iloc[-1] > future_preds['value'].iloc[0] else "descendente"
                    variation = ((future_preds['value'].iloc[-1] / future_preds['value'].iloc[0]) - 1) * 100
                    
                    st.info(f"Tend√™ncia {trend} com varia√ß√£o de {variation:.2f}% no per√≠odo previsto.")
                else:
                    st.error("N√£o foi poss√≠vel carregar os dados hist√≥ricos para compara√ß√£o.")
            else:
                st.error("Falha ao gerar previs√µes. Verifique se o modelo foi treinado corretamente.")
    else:
        st.warning("Por favor, treine o modelo primeiro usando o bot√£o no menu lateral.")

with tab2:
    st.header("An√°lise do Modelo")
    
    if indicator in predictor.models or model_exists:
        # Tentar carregar o modelo novamente se necess√°rio
        if indicator not in predictor.models and model_exists:
            try:
                predictor.models[indicator] = joblib.load(model_path)
                predictor.scalers[indicator] = joblib.load(scaler_path)
            except Exception as e:
                st.error(f"Erro ao carregar modelo: {e}")
        
        # Import√¢ncia das features
        importance = predictor.get_feature_importance(indicator)
        
        if importance is not None:
            st.subheader("Import√¢ncia das Features")
            
            # Para modelos lineares
            if 'coefficient' in importance.columns:
                fig = px.bar(
                    importance.head(15), 
                    x='coefficient', 
                    y='feature',
                    orientation='h',
                    title='Coeficientes do Modelo',
                    labels={'coefficient': 'Coeficiente', 'feature': 'Feature'},
                    color='coefficient',
                    color_continuous_scale='RdBu',
                    range_color=[-abs(importance['coefficient']).max(), abs(importance['coefficient']).max()]
                )
            else:  # Para Random Forest
                fig = px.bar(
                    importance.head(15),
                    x='importance',
                    y='feature',
                    orientation='h',
                    title='Top 15 Features Mais Importantes',
                    labels={'importance': 'Import√¢ncia', 'feature': 'Feature'}
                )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Explica√ß√£o
            st.subheader("Interpreta√ß√£o")
            
            if selected_model == 'random_forest':
                st.markdown("""
                **Como interpretar a import√¢ncia das features:**
                
                - Valores mais altos indicam que a feature tem maior influ√™ncia nas previs√µes.
                - Features com valores hist√≥ricos (lag) do pr√≥prio indicador mostram a import√¢ncia da tend√™ncia recente.
                - Features de outros indicadores revelam rela√ß√µes entre diferentes vari√°veis econ√¥micas.
                
                Por exemplo, se 'ipca_lag_1' (valor do IPCA no m√™s anterior) tem alta import√¢ncia para prever a Selic,
                isso sugere uma forte rela√ß√£o entre infla√ß√£o e decis√µes de pol√≠tica monet√°ria.
                """)
            else:
                st.markdown("""
                **Como interpretar os coeficientes:**
                
                - Valores positivos: um aumento na feature leva a um aumento no indicador previsto.
                - Valores negativos: um aumento na feature leva a uma diminui√ß√£o no indicador previsto.
                - O tamanho do coeficiente indica a magnitude do efeito.
                
                Observe que os coeficientes s√£o calculados sobre dados padronizados (mesma escala),
                ent√£o podem ser comparados diretamente entre si.
                """)
            
            # Tabela completa
            st.subheader("Tabela Completa de Import√¢ncia das Features")
            st.dataframe(importance)
        else:
            st.warning("N√£o foi poss√≠vel calcular a import√¢ncia das features para este modelo.")
            
        # Explica√ß√£o do modelo
        st.subheader("Sobre o Modelo")
        
        if selected_model == 'linear':
            st.markdown("""
            **Regress√£o Linear Simples**
            
            Este modelo procura uma rela√ß√£o linear entre as features e o target. Ele √© bom para entender rela√ß√µes simples
            e diretas entre vari√°veis econ√¥micas, mas pode n√£o capturar rela√ß√µes complexas e n√£o-lineares.
            
            √â um modelo facilmente interpret√°vel, onde cada coeficiente representa o efeito de uma vari√°vel sobre o resultado previsto.
            """)
        elif selected_model in ['ridge', 'lasso']:
            st.markdown("""
            **Regress√£o Regularizada**
            
            Estes modelos s√£o semelhantes √† regress√£o linear, mas incluem penalidades que ajudam a evitar o overfitting,
            especialmente quando h√° muitas features correlacionadas, como √© comum em dados econ√¥micos.
            
            - Ridge: Reduz os coeficientes, mas raramente os torna zero (bom para vari√°veis correlacionadas)
            - Lasso: Pode reduzir coeficientes a zero (bom para sele√ß√£o de features)
            """)
        else:  # Random Forest
            st.markdown("""
            **Random Forest**
            
            Este √© um modelo conjunto baseado em √°rvores de decis√£o. Ele √© capaz de capturar rela√ß√µes n√£o-lineares
            e intera√ß√µes complexas entre vari√°veis econ√¥micas.
            
            Vantagens:
            - Captura rela√ß√µes n√£o-lineares
            - Robusto a outliers
            - N√£o requer suposi√ß√µes sobre a distribui√ß√£o dos dados
            - Geralmente tem boa performance sem muita necessidade de ajustes
            
            Desvantagens:
            - Menos interpret√°vel que modelos lineares
            - Pode ser mais lento para treinar com muitos dados
            """)
    else:
        st.warning("Nenhum modelo treinado dispon√≠vel. Por favor, treine um modelo primeiro.")

with tab3:
    st.header("Dados Hist√≥ricos")
    
    # Carregar dados
    data = load_data(indicator)
    
    if data is not None and not data.empty:
        # Estat√≠sticas b√°sicas
        st.subheader(f"Estat√≠sticas de {indicator_names[indicator]}")
        
        # Per√≠odo dos dados
        min_date = data['date'].min().strftime('%d/%m/%Y')
        max_date = data['date'].max().strftime('%d/%m/%Y')
        
        st.markdown(f"**Per√≠odo dos dados:** {min_date} a {max_date}")
        st.markdown(f"**Total de registros:** {len(data)}")
        
        # Estat√≠sticas dos √∫ltimos 12 meses
        st.subheader("Dados dos √öltimos 12 Meses")
        recent_data = data.sort_values('date', ascending=False).head(12).sort_values('date')
        
        # Gr√°fico recente
        fig = px.line(
            recent_data,
            x='date',
            y='value',
            title=f'Valores Recentes de {indicator_names[indicator]} (√öltimos 12 Meses)',
            labels={'date': 'Data', 'value': 'Valor'}
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela de dados recentes
        recent_data['date'] = recent_data['date'].dt.strftime('%d/%m/%Y')
        st.dataframe(recent_data[['date', 'value']])
        
        # Gr√°fico hist√≥rico completo
        st.subheader("S√©rie Hist√≥rica Completa")
        fig2 = px.line(
            data,
            x='date',
            y='value',
            title=f'S√©rie Hist√≥rica Completa de {indicator_names[indicator]}',
            labels={'date': 'Data', 'value': 'Valor'}
        )
        st.plotly_chart(fig2, use_container_width=True)
        
        # Decomposi√ß√£o de tend√™ncia (simplificado)
        if len(data) >= 24:
            st.subheader("An√°lise de Tend√™ncia")
            
            # Calcular m√©dias m√≥veis
            data['MA_3m'] = data['value'].rolling(window=3).mean()
            data['MA_6m'] = data['value'].rolling(window=6).mean()
            data['MA_12m'] = data['value'].rolling(window=12).mean()
            
            # Gr√°fico com m√©dias m√≥veis
            fig3 = px.line(
                data,
                x='date',
                y=['value', 'MA_3m', 'MA_6m', 'MA_12m'],
                title='An√°lise de Tend√™ncia com M√©dias M√≥veis',
                labels={'date': 'Data', 'value': 'Valor', 'variable': 'M√©trica'},
                color_discrete_map={
                    'value': 'blue',
                    'MA_3m': 'green',
                    'MA_6m': 'orange',
                    'MA_12m': 'red'
                }
            )
            fig3.update_layout(
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            st.plotly_chart(fig3, use_container_width=True)
    else:
        st.error(f"N√£o h√° dados dispon√≠veis para {indicator_names[indicator]}.")

# Rodap√©
st.markdown("---")
st.caption("An√°lise de Machine Learning desenvolvida com dados do Banco Central do Brasil")