# main.py (vers√£o unificada)
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import time
import sys
import os

# Configura√ß√£o da p√°gina (deve ser a primeira chamada Streamlit)
st.set_page_config(
    page_title="Sistema de An√°lise Econ√¥mica - BCB",
    page_icon="üìä",
    layout="wide"
)

# Fun√ß√£o para tentar importar os m√≥dulos necess√°rios
def load_modules():
    try:
        global BCBDataCollector, DatabaseManager
        from data_collector import BCBDataCollector
        from database_manager import DatabaseManager
        return True
    except ImportError as e:
        st.error(f"Erro ao importar m√≥dulos necess√°rios: {e}")
        return False

# Fun√ß√£o para a p√°gina inicial
def home_page():
    st.title("Sistema de An√°lise Econ√¥mica com Dados do Banco Central do Brasil")
    st.markdown("""
    Este sistema permite coletar, visualizar e analisar dados econ√¥micos do Banco Central do Brasil,
    al√©m de criar modelos de machine learning para previs√£o de indicadores.
    """)
    
    # Menu principal
    st.header("Escolha uma op√ß√£o:")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("Coleta de Dados")
        st.markdown("Atualiza a base de dados com os √∫ltimos dados dispon√≠veis nas APIs do BCB.")
        if st.button("Coletar Dados"):
            if load_modules():
                collect_data()
    
    with col2:
        st.subheader("Dashboard Econ√¥mico")
        st.markdown("Visualize os indicadores econ√¥micos e suas tend√™ncias.")
        if st.button("Abrir Dashboard"):
            st.session_state.page = "dashboard"
            st.experimental_rerun()
    
    with col3:
        st.subheader("Previs√µes com ML")
        st.markdown("Use machine learning para prever tend√™ncias futuras dos indicadores.")
        if st.button("Abrir Previs√µes"):
            st.session_state.page = "ml"
            st.experimental_rerun()
    
    # Informa√ß√µes adicionais
    st.header("Documenta√ß√£o")
    st.markdown("""
    ### Como usar este sistema
    
    1. **Coleta de Dados**: Primeiro, colete os dados mais recentes das APIs do Banco Central do Brasil.
    2. **Dashboard Econ√¥mico**: Visualize os indicadores e suas rela√ß√µes.
    3. **Previs√µes com ML**: Treine modelos preditivos e visualize previs√µes futuras.
    """)

# Fun√ß√£o para coletar dados
def collect_data():
    with st.spinner("Coletando dados..."):
        collector = BCBDataCollector()
        data = collector.collect_all_data(last_n_years=5)
        db = DatabaseManager()
        results = db.save_all_data(data)
        if all(results.values()):
            st.success("Dados coletados e salvos com sucesso!")
        else:
            st.warning("Alguns dados n√£o puderam ser salvos.")

# Fun√ß√£o para carregar dados
@st.cache_data(ttl=3600)  # Cache por 1 hora
def load_data(table_name, start_date=None, end_date=None):
    if load_modules():
        db_manager = DatabaseManager()
        return db_manager.load_data(table_name, start_date, end_date)
    return None

# Fun√ß√£o para o Dashboard Econ√¥mico
def dashboard_page():
    st.title("Dashboard Econ√¥mico - Dados do Banco Central do Brasil")
    
    if not load_modules():
        st.error("N√£o foi poss√≠vel carregar os m√≥dulos necess√°rios.")
        if st.button("Voltar para a p√°gina inicial"):
            st.session_state.page = "home"
            st.experimental_rerun()
        return
    
    # Mapeamento de nomes para exibi√ß√£o
    indicator_names = {
        'ipca': 'Infla√ß√£o (IPCA)',
        'pib': 'PIB Real',
        'divida_pib': 'D√≠vida/PIB',
        'selic': 'Taxa SELIC Di√°ria',
        'selic_meta': 'Meta da Taxa SELIC',
        'transacoes': 'Saldo em Transa√ß√µes Correntes',
        'resultado_primario': 'Resultado Prim√°rio'
    }
    
    # Sidebar
    st.sidebar.title("Op√ß√µes")
    
    # Atualiza√ß√£o de dados
    st.sidebar.subheader("Atualiza√ß√£o de Dados")
    years_to_fetch = st.sidebar.slider("Anos de dados para coletar", 1, 10, 5)
    update_button = st.sidebar.button("Atualizar Dados")
    
    if update_button:
        collect_data()
    
    # Sele√ß√£o de indicadores
    st.sidebar.subheader("Indicadores")
    indicators = st.sidebar.multiselect(
        "Selecione os indicadores para visualizar",
        list(indicator_names.keys()),
        default=['ipca', 'selic', 'pib'],
        format_func=lambda x: indicator_names.get(x, x)
    )
    
    # Exibir dados conforme sele√ß√£o
    if not indicators:
        st.warning("Por favor, selecione pelo menos um indicador no menu lateral.")
    else:
        # Para cada indicador selecionado
        for indicator in indicators:
            data = load_data(indicator)
            
            if data is not None and not data.empty:
                st.subheader(indicator_names[indicator])
                
                # Gr√°fico interativo com Plotly
                fig = px.line(
                    data, 
                    x='date', 
                    y='value',
                    title=f'Evolu√ß√£o de {indicator_names[indicator]}',
                    labels={'date': 'Data', 'value': 'Valor'}
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Estat√≠sticas b√°sicas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("Estat√≠sticas")
                    st.dataframe(data['value'].describe())
                
                with col2:
                    st.write("Dados Recentes")
                    st.dataframe(data.sort_values('date', ascending=False).head(5))
            else:
                st.error(f"N√£o h√° dados dispon√≠veis para {indicator_names[indicator]}.")
    
    # Bot√£o para voltar
    if st.button("Voltar para a p√°gina inicial"):
        st.session_state.page = "home"
        st.experimental_rerun()

# Fun√ß√£o para a p√°gina de Machine Learning
def ml_page():
    st.title("Previs√µes de Indicadores Econ√¥micos")
    
    if not load_modules():
        st.error("N√£o foi poss√≠vel carregar os m√≥dulos necess√°rios.")
        if st.button("Voltar para a p√°gina inicial"):
            st.session_state.page = "home"
            st.experimental_rerun()
        return
    
    # Vers√£o simplificada da p√°gina de ML
    st.info("Esta √© uma vers√£o simplificada da p√°gina de Machine Learning.")
    
    # Mapeamento de nomes para exibi√ß√£o
    indicator_names = {
        'ipca': 'Infla√ß√£o (IPCA)',
        'pib': 'PIB Real',
        'divida_pib': 'D√≠vida/PIB',
        'selic': 'Taxa SELIC Di√°ria',
        'selic_meta': 'Meta da Taxa SELIC',
        'transacoes': 'Saldo em Transa√ß√µes Correntes',
        'resultado_primario': 'Resultado Prim√°rio'
    }
    
    # Sele√ß√£o de indicador
    indicator = st.selectbox(
        "Selecione o indicador para prever",
        list(indicator_names.keys()),
        format_func=lambda x: indicator_names.get(x, x)
    )
    
    # N√∫mero de per√≠odos futuros para prever
    forecast_periods = st.slider(
        "N√∫mero de meses para prever",
        min_value=1,
        max_value=12,
        value=6
    )
    
    # Carregar dados do indicador
    data = load_data(indicator)
    
    if data is not None and not data.empty:
        # Exibir dados hist√≥ricos
        st.subheader(f"Dados hist√≥ricos de {indicator_names[indicator]}")
        
        fig = px.line(
            data, 
            x='date', 
            y='value',
            title=f'Hist√≥rico de {indicator_names[indicator]}',
            labels={'date': 'Data', 'value': 'Valor'}
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Simula√ß√£o de previs√£o (vers√£o simplificada)
        if st.button("Simular Previs√£o"):
            with st.spinner("Calculando previs√£o..."):
                # Simular um tempo de processamento
                time.sleep(2)
                
                # Criar dados de previs√£o fict√≠cios
                last_date = data['date'].max()
                last_value = data.loc[data['date'] == last_date, 'value'].values[0]
                
                # Criar tend√™ncia simples
                trend = 0.05  # 5% de varia√ß√£o
                future_dates = pd.date_range(start=last_date, periods=forecast_periods+1, freq='M')[1:]
                future_values = [last_value * (1 + trend * i) for i in range(1, forecast_periods+1)]
                
                future_df = pd.DataFrame({
                    'date': future_dates,
                    'value': future_values,
                    'tipo': 'Previs√£o'
                })
                
                # Preparar dados para gr√°fico
                historical_df = pd.DataFrame({
                    'date': data['date'].tail(12),
                    'value': data['value'].tail(12),
                    'tipo': 'Hist√≥rico'
                })
                
                combined_df = pd.concat([historical_df, future_df])
                
                # Criar gr√°fico
                fig = px.line(
                    combined_df, 
                    x='date', 
                    y='value', 
                    color='tipo',
                    title=f'Previs√£o de {indicator_names[indicator]} (Pr√≥ximos {forecast_periods} meses)',
                    labels={'date': 'Data', 'value': 'Valor', 'tipo': 'Tipo'},
                    color_discrete_map={'Hist√≥rico': 'blue', 'Previs√£o': 'red'}
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                st.success("Previs√£o conclu√≠da! (Nota: Esta √© uma simula√ß√£o para demonstra√ß√£o)")
    else:
        st.error(f"N√£o h√° dados dispon√≠veis para {indicator_names[indicator]}.")
    
    # Bot√£o para voltar
    if st.button("Voltar para a p√°gina inicial"):
        st.session_state.page = "home"
        st.experimental_rerun()

# Principal
if 'page' not in st.session_state:
    st.session_state.page = "home"

# Seletor de p√°gina via sidebar
page = st.sidebar.radio(
    "Navega√ß√£o",
    ["P√°gina Inicial", "Dashboard Econ√¥mico", "Previs√µes com ML"],
    key="sidebar_nav"
)

# Mapear sele√ß√£o para o estado da p√°gina
if page == "P√°gina Inicial":
    st.session_state.page = "home"
elif page == "Dashboard Econ√¥mico":
    st.session_state.page = "dashboard"
elif page == "Previs√µes com ML":
    st.session_state.page = "ml"

# Exibir a p√°gina selecionada
if st.session_state.page == "home":
    home_page()
elif st.session_state.page == "dashboard":
    dashboard_page()
elif st.session_state.page == "ml":
    ml_page()